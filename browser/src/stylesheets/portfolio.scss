$project-select-transition: all 0.5s ease-out;

#portfolio-wrapper {
	position: relative;
	align-items: center;
	&.portfolio-wrapper-lg {
		background-color: black;
	}
}

.portfolio-background-lg {
  top: 0; /* TODO: hack for safari/ff */
  left: 0;
  right: 0;
  position: absolute;
  width: 100%;
  height: 100%;
  min-height: inherit;
  opacity: .7;
  background: url("#{$AMAZON_S3_IMAGES}wallpaper/portfolio.png");
  background-size: cover;
	background-position: center;
  background-repeat: no-repeat;
}

.portfolio {
	top: 0; /* TODO: hack for safari/ff */
	left: 0;
	right: 0;
	align-items: center;
	&.portfolio-lg {
		position: relative;
		flex-wrap: wrap;
		-webkit-flex-wrap: wrap;
		justify-content: space-around;
		width: 100%;
		height: 100%;
	}
	&.portfolio-sm {
		z-index: 2;
		position: fixed;
		align-items: center;
		justify-content: space-around;
		background-color: rgb(255, 255, 255);
		top: calc(#{$lg-nav} - 1px);
		@media screen and (max-width: $md) {
			top: calc(#{$sm-nav} - 1px);
		}
		// Small panel sizes
		$panels: (
      ( 0, 0, 0, 0px ),
      ( $sm, calc(50% - 200px), 10px, 1px ),
      ( $md, calc(50% - 250px), 15px, 1px )
    );
		@each $size in $panels {
			// Media queries for screen sizes and handheld landscape mode
			$media-query: "(min-width: #{nth($size, 1)})";
			@if nth($size, 1) == $sm {
				$media-query: "#{$media-query}, (max-height: #{$md}) AND (min-width: #{$sm})";
			} @else if nth($size, 1) == $md {
				$media-query: "#{$media-query} AND (min-height: #{$md})";
			}

			@media #{$media-query} {
				left: nth($size, 2);
				right: nth($size, 2);
				border-bottom-left-radius: nth($size, 3);
				border-bottom-right-radius: nth($size, 3);
				border: nth($size, 4) solid $borders;
				border-top: none;
				border-bottom-width: 1px;
			}
		}
		transition: $project-select-transition;
	}
}

.bubble-child {
	width: inherit;
	height: inherit;
	border-radius: inherit;
}

@mixin make-project-bubbles ($bubbles) {
  @each $size in $bubbles {
			// Media queries for screen sizes and handheld landscape mode
			$media-query: "(min-width: #{nth($size, 1)})";
			@if nth($size, 1) == $sm {
				$media-query: "#{$media-query}, (max-height: #{$md}) AND (min-width: #{$sm})";
			} @else if nth($size, 1) == $md {
				$media-query: "#{$media-query} AND (min-height: #{$md})";
			}

			@media #{$media-query} {
			height: nth($size, 2);
			width: nth($size, 2);
			margin: nth($size, 3);
			border: nth($size, 4) solid $borders;
		}
	}
}

.project-bubble {
	border-radius: 50%;
	color: inherit;
	-webkit-text-fill-color: inherit;
	&.project-bubble-sm {
		// Panel bubble sizes
		$bubbles: (
      ( 0, 50px, 5px 0, 2px ),
      ( $sm, 60px, 7px 0, 2px ),
      ( $md, 75px, 10px 0, 3px )
    );
		@include make-project-bubbles($bubbles);
		transition: $project-select-transition;
		&:hover > .project-background > .project-wrapper { // small bubble colored icons
			> .project-icon {
				@media (max-width: $md) {
					filter: brightness(0) invert(90%);
					z-index: 1;
				}
			}
			> .project-text-wrapper {
				background-color: rgb(0, 0, 0);
				background-color: rgba(0, 0, 0, .75);
				cursor: pointer;
				opacity: 1;
			}
		}
	}
	&.project-bubble-lg {
		// Main bubble sizes
		$bubbles: (
      ( 0, 120px, 10px 20px, 4px ),
      ( $sm, 120px, 10px 20px, 4px ),
      ( $md, 120px, 20px 25px, 4px ),
      ( $lg, 150px, 20px 30px, 5px )
    );
		@include make-project-bubbles($bubbles);
		animation: 2s infinite border-pulse;
		&:hover {
			animation: none;
			border-color: $active;
		}
		@keyframes border-pulse {
			0%   {border-color: $borders}
			50%  {border-color: $active}
			100% {border-color: $borders}
		}
	}
	/* Active Project Bubble */
	&.active-bubble {
		border-color: $active;
		> .project-background > .project-wrapper {
			> .project-icon {
				@media (max-width: $md), (max-height: $md) {
					filter: brightness(0) invert(90%);
					z-index: 1;
				}
			}
			> .project-text-wrapper {
				filter: none;
				background-color: rgb(0, 0, 0);
				background-color: rgba(0, 0, 0, .75);
				color: $text-light;
				-webkit-text-fill-color: $text-light;
				opacity: 1;
			}
		}
	}
	> .project-background {
		@extend .bubble-child;
		background: $background;
		> .project-wrapper {
			@extend .bubble-child;
			position: relative;
			/* Project Bubble Icons */
			@each $name, $icon-size in $projects {
				> .i-#{$name} {
					@extend .bubble-child;
					position: absolute;
  				background: url("#{$AMAZON_S3_IMAGES}#{$name}/icon.png");
					background-size: $icon-size;
					background-repeat: no-repeat;
					background-position: center;
				}
			}
			> .project-icon {
				transition: filter 0.2s linear, z-index .2s linear;
			}
			> .project-text-wrapper {
				@extend .bubble-child;
				position: absolute;
				justify-content: center;
				align-items: center;
				color: $text-light;
				-webkit-text-fill-color: $text-light;
				opacity: 0;
				transition: opacity 0.2s linear, color 0.2s linear, background 0.2s linear;
				&:hover {
					background-color: rgb(0, 0, 0);
					background-color: rgba(0, 0, 0, .75);
					cursor: pointer;
					opacity: 1;
				}
				> .project-bubble-text {
					text-align: center;
					font-family: $headers;
					$text: (
						( 0, 500, 1em ),
						( $lg, 600, 1.2em )
					);
					@each $size in $text {
							// Media queries for screen sizes and handheld landscape mode
							$media-query: "(min-width: #{nth($size, 1)})";
							@if nth($size, 1) == 0 {
								$media-query: "#{$media-query}, (max-height: #{$md})";
							} @else if nth($size, 1) == $md {
								$media-query: "#{$media-query} AND (min-height: #{$md})";
							}

							@media #{$media-query} {
							font-weight: nth($size, 2);
							font-size: nth($size, 3);
						}
					}
					padding: 0 7px;
					cursor: inherit;
					user-select: none;
					&.project-bubble-text-sm {
						font-weight: 600;
						font-size: .7em;
						transition: $project-select-transition;
						@media (max-width: $md), (max-height: $md) {
							display: none !important;
						}
					}
				}
			}
		}
	}
}





